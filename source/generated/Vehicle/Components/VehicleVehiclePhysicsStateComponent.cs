//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class VehicleEntity {

    public Vehicle.PhysicsStateComponent vehiclePhysicsState { get { return (Vehicle.PhysicsStateComponent)GetComponent(VehicleComponentsLookup.VehiclePhysicsState); } }
    public bool hasVehiclePhysicsState { get { return HasComponent(VehicleComponentsLookup.VehiclePhysicsState); } }

    public void AddVehiclePhysicsState(KMath.Vec2f newSpawnPosition, float newAccelerationXAxis, float newAccelerationSpeedYAxis, KMath.Vec2f newPosition, KMath.Vec2f newPreviousPosition, float newRotationZ, float newPreviousRotationZ, KMath.Vec2f newVelocity, KMath.Vec2f newAcceleration, bool newOnGrounded, Enums.VehicleMovementDirection newMovingDirection, bool newIsAffectedByGravity, bool newIsMoving, bool newIsMovingPrevious, bool newIsCollided, Globals.VehicleFrameInput newFrameInput, System.Collections.Generic.List<Vehicle.Thruster> newThrusters) {
        var index = VehicleComponentsLookup.VehiclePhysicsState;
        var component = (Vehicle.PhysicsStateComponent)CreateComponent(index, typeof(Vehicle.PhysicsStateComponent));
        component.SpawnPosition = newSpawnPosition;
        component.AccelerationXAxis = newAccelerationXAxis;
        component.AccelerationSpeedYAxis = newAccelerationSpeedYAxis;
        component.Position = newPosition;
        component.PreviousPosition = newPreviousPosition;
        component.RotationZ = newRotationZ;
        component.PreviousRotationZ = newPreviousRotationZ;
        component.Velocity = newVelocity;
        component.Acceleration = newAcceleration;
        component.OnGrounded = newOnGrounded;
        component.MovingDirection = newMovingDirection;
        component.IsAffectedByGravity = newIsAffectedByGravity;
        component.IsMoving = newIsMoving;
        component.IsMovingPrevious = newIsMovingPrevious;
        component.IsCollided = newIsCollided;
        component.FrameInput = newFrameInput;
        component.Thrusters = newThrusters;
        AddComponent(index, component);
    }

    public void ReplaceVehiclePhysicsState(KMath.Vec2f newSpawnPosition, float newAccelerationXAxis, float newAccelerationSpeedYAxis, KMath.Vec2f newPosition, KMath.Vec2f newPreviousPosition, float newRotationZ, float newPreviousRotationZ, KMath.Vec2f newVelocity, KMath.Vec2f newAcceleration, bool newOnGrounded, Enums.VehicleMovementDirection newMovingDirection, bool newIsAffectedByGravity, bool newIsMoving, bool newIsMovingPrevious, bool newIsCollided, Globals.VehicleFrameInput newFrameInput, System.Collections.Generic.List<Vehicle.Thruster> newThrusters) {
        var index = VehicleComponentsLookup.VehiclePhysicsState;
        var component = (Vehicle.PhysicsStateComponent)CreateComponent(index, typeof(Vehicle.PhysicsStateComponent));
        component.SpawnPosition = newSpawnPosition;
        component.AccelerationXAxis = newAccelerationXAxis;
        component.AccelerationSpeedYAxis = newAccelerationSpeedYAxis;
        component.Position = newPosition;
        component.PreviousPosition = newPreviousPosition;
        component.RotationZ = newRotationZ;
        component.PreviousRotationZ = newPreviousRotationZ;
        component.Velocity = newVelocity;
        component.Acceleration = newAcceleration;
        component.OnGrounded = newOnGrounded;
        component.MovingDirection = newMovingDirection;
        component.IsAffectedByGravity = newIsAffectedByGravity;
        component.IsMoving = newIsMoving;
        component.IsMovingPrevious = newIsMovingPrevious;
        component.IsCollided = newIsCollided;
        component.FrameInput = newFrameInput;
        component.Thrusters = newThrusters;
        ReplaceComponent(index, component);
    }

    public void RemoveVehiclePhysicsState() {
        RemoveComponent(VehicleComponentsLookup.VehiclePhysicsState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class VehicleMatcher {

    static Entitas.IMatcher<VehicleEntity> _matcherVehiclePhysicsState;

    public static Entitas.IMatcher<VehicleEntity> VehiclePhysicsState {
        get {
            if (_matcherVehiclePhysicsState == null) {
                var matcher = (Entitas.Matcher<VehicleEntity>)Entitas.Matcher<VehicleEntity>.AllOf(VehicleComponentsLookup.VehiclePhysicsState);
                matcher.componentNames = VehicleComponentsLookup.componentNames;
                _matcherVehiclePhysicsState = matcher;
            }

            return _matcherVehiclePhysicsState;
        }
    }
}
