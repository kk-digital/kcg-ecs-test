//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ParticleEntity {

    public Particle.BaseComponent particleBase { get { return (Particle.BaseComponent)GetComponent(ParticleComponentsLookup.ParticleBase); } }
    public bool hasParticleBase { get { return HasComponent(ParticleComponentsLookup.ParticleBase); } }

    public void AddParticleBase(int newIndex, Particle.ParticleType newParticleType) {
        var index = ParticleComponentsLookup.ParticleBase;
        var component = (Particle.BaseComponent)CreateComponent(index, typeof(Particle.BaseComponent));
        component.Index = newIndex;
        component.ParticleType = newParticleType;
        AddComponent(index, component);
    }

    public void ReplaceParticleBase(int newIndex, Particle.ParticleType newParticleType) {
        var index = ParticleComponentsLookup.ParticleBase;
        var component = (Particle.BaseComponent)CreateComponent(index, typeof(Particle.BaseComponent));
        component.Index = newIndex;
        component.ParticleType = newParticleType;
        ReplaceComponent(index, component);
    }

    public void RemoveParticleBase() {
        RemoveComponent(ParticleComponentsLookup.ParticleBase);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ParticleMatcher {

    static Entitas.IMatcher<ParticleEntity> _matcherParticleBase;

    public static Entitas.IMatcher<ParticleEntity> ParticleBase {
        get {
            if (_matcherParticleBase == null) {
                var matcher = (Entitas.Matcher<ParticleEntity>)Entitas.Matcher<ParticleEntity>.AllOf(ParticleComponentsLookup.ParticleBase);
                matcher.componentNames = ParticleComponentsLookup.componentNames;
                _matcherParticleBase = matcher;
            }

            return _matcherParticleBase;
        }
    }
}
