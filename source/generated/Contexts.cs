//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ContextsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts : Entitas.IContexts {

    public static Contexts sharedInstance {
        get {
            if (_sharedInstance == null) {
                _sharedInstance = new Contexts();
            }

            return _sharedInstance;
        }
        set { _sharedInstance = value; }
    }

    static Contexts _sharedInstance;

    public AgentContext agent { get; set; }
    public BlackboardContext blackboard { get; set; }
    public BTContext bT { get; set; }
    public GameEventContext gameEvent { get; set; }
    public InputContext input { get; set; }
    public InventoryContext inventory { get; set; }
    public ItemInventoryContext itemInventory { get; set; }
    public ItemParticleContext itemParticle { get; set; }
    public MechContext mech { get; set; }
    public ParticleContext particle { get; set; }
    public ParticleEmitterContext particleEmitter { get; set; }
    public PlanetEventContext planetEvent { get; set; }
    public ProjectileContext projectile { get; set; }
    public SoundEffectContext soundEffect { get; set; }
    public VehicleContext vehicle { get; set; }
    public VfxEffectContext vfxEffect { get; set; }

    public Entitas.IContext[] allContexts { get { return new Entitas.IContext [] { agent, blackboard, bT, gameEvent, input, inventory, itemInventory, itemParticle, mech, particle, particleEmitter, planetEvent, projectile, soundEffect, vehicle, vfxEffect }; } }

    public Contexts() {
        agent = new AgentContext();
        blackboard = new BlackboardContext();
        bT = new BTContext();
        gameEvent = new GameEventContext();
        input = new InputContext();
        inventory = new InventoryContext();
        itemInventory = new ItemInventoryContext();
        itemParticle = new ItemParticleContext();
        mech = new MechContext();
        particle = new ParticleContext();
        particleEmitter = new ParticleEmitterContext();
        planetEvent = new PlanetEventContext();
        projectile = new ProjectileContext();
        soundEffect = new SoundEffectContext();
        vehicle = new VehicleContext();
        vfxEffect = new VfxEffectContext();

        var postConstructors = System.Linq.Enumerable.Where(
            GetType().GetMethods(),
            method => System.Attribute.IsDefined(method, typeof(Entitas.CodeGeneration.Attributes.PostConstructorAttribute))
        );

        foreach (var postConstructor in postConstructors) {
            postConstructor.Invoke(this, null);
        }
    }

    public void Reset() {
        var contexts = allContexts;
        for (int i = 0; i < contexts.Length; i++) {
            contexts[i].Reset();
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EntityIndexGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts {

    public const string InventoryID = "InventoryID";
    public const string ItemBaseId = "ItemBaseId";
    public const string ItemBaseType = "ItemBaseType";
    public const string ItemInventory = "ItemInventory";
    public const string MechBase = "MechBase";
    public const string ProjectileBase = "ProjectileBase";
    public const string VehicleBase = "VehicleBase";

    [Entitas.CodeGeneration.Attributes.PostConstructor]
    public void InitializeEntityIndices() {
        inventory.AddEntityIndex(new Entitas.PrimaryEntityIndex<InventoryEntity, int>(
            InventoryID,
            inventory.GetGroup(InventoryMatcher.InventoryID),
            (e, c) => ((Inventory.IDComponent)c).ID));

        itemInventory.AddEntityIndex(new Entitas.PrimaryEntityIndex<ItemInventoryEntity, int>(
            ItemBaseId,
            itemInventory.GetGroup(ItemInventoryMatcher.ItemBase),
            (e, c) => ((Item.BaseComponent)c).Id));
        itemParticle.AddEntityIndex(new Entitas.PrimaryEntityIndex<ItemParticleEntity, int>(
            ItemBaseId,
            itemParticle.GetGroup(ItemParticleMatcher.ItemBase),
            (e, c) => ((Item.BaseComponent)c).Id));

        itemInventory.AddEntityIndex(new Entitas.EntityIndex<ItemInventoryEntity, Enums.ItemType>(
            ItemBaseType,
            itemInventory.GetGroup(ItemInventoryMatcher.ItemBase),
            (e, c) => ((Item.BaseComponent)c).Type));
        itemParticle.AddEntityIndex(new Entitas.EntityIndex<ItemParticleEntity, Enums.ItemType>(
            ItemBaseType,
            itemParticle.GetGroup(ItemParticleMatcher.ItemBase),
            (e, c) => ((Item.BaseComponent)c).Type));

        itemInventory.AddEntityIndex(new Entitas.EntityIndex<ItemInventoryEntity, int>(
            ItemInventory,
            itemInventory.GetGroup(ItemInventoryMatcher.ItemInventory),
            (e, c) => ((Item.InventoryComponent)c).InventoryID));

        mech.AddEntityIndex(new Entitas.PrimaryEntityIndex<MechEntity, long>(
            MechBase,
            mech.GetGroup(MechMatcher.MechBase),
            (e, c) => ((Mech.BaseComponent)c).ID));

        projectile.AddEntityIndex(new Entitas.PrimaryEntityIndex<ProjectileEntity, long>(
            ProjectileBase,
            projectile.GetGroup(ProjectileMatcher.ProjectileBase),
            (e, c) => ((Projectile.BaseComponent)c).Id));

        vehicle.AddEntityIndex(new Entitas.PrimaryEntityIndex<VehicleEntity, long>(
            VehicleBase,
            vehicle.GetGroup(VehicleMatcher.VehicleBase),
            (e, c) => ((Vehicle.BaseComponent)c).Id));
    }
}

public static class ContextsExtensions {

    public static InventoryEntity GetEntityWithInventoryID(this InventoryContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<InventoryEntity, int>)context.GetEntityIndex(Contexts.InventoryID)).GetEntity(ID);
    }

    public static ItemInventoryEntity GetEntityWithItemBaseId(this ItemInventoryContext context, int Id) {
        return ((Entitas.PrimaryEntityIndex<ItemInventoryEntity, int>)context.GetEntityIndex(Contexts.ItemBaseId)).GetEntity(Id);
    }

    public static ItemParticleEntity GetEntityWithItemBaseId(this ItemParticleContext context, int Id) {
        return ((Entitas.PrimaryEntityIndex<ItemParticleEntity, int>)context.GetEntityIndex(Contexts.ItemBaseId)).GetEntity(Id);
    }

    public static System.Collections.Generic.HashSet<ItemInventoryEntity> GetEntitiesWithItemBaseType(this ItemInventoryContext context, Enums.ItemType Type) {
        return ((Entitas.EntityIndex<ItemInventoryEntity, Enums.ItemType>)context.GetEntityIndex(Contexts.ItemBaseType)).GetEntities(Type);
    }

    public static System.Collections.Generic.HashSet<ItemParticleEntity> GetEntitiesWithItemBaseType(this ItemParticleContext context, Enums.ItemType Type) {
        return ((Entitas.EntityIndex<ItemParticleEntity, Enums.ItemType>)context.GetEntityIndex(Contexts.ItemBaseType)).GetEntities(Type);
    }

    public static System.Collections.Generic.HashSet<ItemInventoryEntity> GetEntitiesWithItemInventory(this ItemInventoryContext context, int InventoryID) {
        return ((Entitas.EntityIndex<ItemInventoryEntity, int>)context.GetEntityIndex(Contexts.ItemInventory)).GetEntities(InventoryID);
    }

    public static MechEntity GetEntityWithMechBase(this MechContext context, long ID) {
        return ((Entitas.PrimaryEntityIndex<MechEntity, long>)context.GetEntityIndex(Contexts.MechBase)).GetEntity(ID);
    }

    public static ProjectileEntity GetEntityWithProjectileBase(this ProjectileContext context, long Id) {
        return ((Entitas.PrimaryEntityIndex<ProjectileEntity, long>)context.GetEntityIndex(Contexts.ProjectileBase)).GetEntity(Id);
    }

    public static VehicleEntity GetEntityWithVehicleBase(this VehicleContext context, long Id) {
        return ((Entitas.PrimaryEntityIndex<VehicleEntity, long>)context.GetEntityIndex(Contexts.VehicleBase)).GetEntity(Id);
    }
}